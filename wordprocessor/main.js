// Generated by CoffeeScript 1.4.0
(function() {
  var events, fs, path, wordprocessor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  path = require("path");

  events = require("events").EventEmitter;

  wordprocessor = (function(_super) {
    var scriptcount, words;

    __extends(wordprocessor, _super);

    words = "";

    scriptcount = 0;

    function wordprocessor() {}

    wordprocessor.prototype.process = function(wordsinput, argv) {
      var plugin, plugindir, plugins, pr, processword, that, tmpwords, _i, _len, _results;
      this.words = wordsinput;
      plugindir = fs.readdirSync("" + __dirname + "/plugins");
      plugins = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = plugindir.length; _i < _len; _i++) {
          plugin = plugindir[_i];
          if (plugin.slice(-3) === ".js") {
            _results.push(plugin);
          }
        }
        return _results;
      })();
      this.scriptcount = 0;
      that = this;
      _results = [];
      for (_i = 0, _len = plugins.length; _i < _len; _i++) {
        plugin = plugins[_i];
        if (argv["argv"].debug) {
          console.log("Calling plugin " + (path.join(__dirname, 'plugins', plugin)));
        }
        processword = require("" + (path.join(__dirname, 'plugins', plugin))).processword;
        pr = new processword();
        pr.on("end", function(data) {
          if (data !== void 0) {
            that.words = data;
          }
          that.scriptcount++;
          if (that.scriptcount === plugins.length) {
            return that.emit("end");
          }
        });
        tmpwords = this.words;
        _results.push(pr.process(tmpwords, argv));
      }
      return _results;
    };

    wordprocessor.prototype.getresult = function() {
      return this.words;
    };

    return wordprocessor;

  })(events);

  exports.wordprocessor = wordprocessor;

}).call(this);
