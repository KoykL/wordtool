// Generated by CoffeeScript 1.4.0
(function() {
  var events, fs, getPlatformEOL, outputter, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require("events").EventEmitter;

  fs = require("fs");

  path = require("path");

  getPlatformEOL = function() {
    if (process.platform === "win32") {
      return "\r\n";
    } else {
      return "\n";
    }
  };

  outputter = (function(_super) {

    __extends(outputter, _super);

    function outputter() {}

    outputter.prototype.process = function(words, option) {
      var chineseoutput, chineseoutputfile, each, i, myword, mywordchinese, output, outputfile, sum, tmpwords, _i, _j, _len, _len1;
      tmpwords = words;
      chineseoutput = void 0;
      if (option["argv"]["shuffle-words"]) {
        outputfile = "s" + option['inputfile'];
      } else {
        outputfile = "" + option['inputfile'];
      }
      output = path.join(option["argv"]["outputdir"], outputfile);
      if (option["argv"]["separated-definition"]) {
        chineseoutputfile = "c" + outputfile;
        chineseoutput = path.join(option["argv"]["outputdir"], chineseoutputfile);
      }
      if (option["argv"]["with-index"]) {
        console.log("-------------------------------------------");
        for (i = _i = 0, _len = tmpwords.length; _i < _len; i = ++_i) {
          each = tmpwords[i];
          each["index"] = i;
        }
        console.log(tmpwords);
      }
      myword = "";
      mywordchinese = "";
      for (_j = 0, _len1 = tmpwords.length; _j < _len1; _j++) {
        each = tmpwords[_j];
        sum = "";
        if (each["index"] !== void 0) {
          sum += each["index"];
          sum += ":";
          sum += " ";
        }
        sum += each["name"];
        if (each["definition"] && !option["argv"]["separated-definition"]) {
          sum += " ";
          sum += each["definition"];
        }
        myword += "" + sum + (getPlatformEOL());
        if (option["argv"]["separated-definition"]) {
          if (option["argv"]["with-index"]) {
            mywordchinese += "" + each.index + ": " + each.definition + (getPlatformEOL());
          } else {
            mywordchinese += "" + each.definition + (getPlatformEOL());
          }
        }
      }
      fs.writeFileSync(output, myword);
      if (chineseoutput) {
        fs.writeFileSync(chineseoutput, mywordchinese);
      } else {
        chineseoutput = "None";
      }
      return this.emit("end", "" + output + " " + chineseoutput);
    };

    return outputter;

  })(events);

  exports.outputter = outputter;

}).call(this);
