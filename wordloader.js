// Generated by CoffeeScript 1.4.0
(function() {
  var events, fs, ll, path, wordloader,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require("path");

  ll = require("lazylines");

  events = require("events");

  wordloader = (function(_super) {

    __extends(wordloader, _super);

    function wordloader(wordpath, files) {
      var callbackfunction, count, fd, file, inp, that, tmpholder, _i, _len;
      this.texts = [];
      count = 0;
      this.endcount = 0;
      tmpholder = [];
      that = this;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        fd = fs.createReadStream("" + wordpath + file, {
          flags: 'r',
          encodeing: "utf8",
          fd: null,
          mode: 666,
          bufferSize: 64 * 1024
        });
        inp = new ll.LineReadStream(fd, "utf8");
        tmpholder[count] = new Array();
        callbackfunction = void 0;
        eval("callbackfunction = function (data){\ntmpholder[" + count + "].push(ll.chomp(data))\n/*console.log(data)*/\n}");
        inp.on("line", callbackfunction);
        count++;
        inp.on("end", function() {
          var tmp, word, _j, _k, _len1, _len2;
          if (that.endcount >= files.length - 1) {
            for (_j = 0, _len1 = tmpholder.length; _j < _len1; _j++) {
              tmp = tmpholder[_j];
              for (_k = 0, _len2 = tmp.length; _k < _len2; _k++) {
                word = tmp[_k];
                that.texts.push(word);
              }
            }
            that.emit("end", that.texts);
          }
          return that.endcount++;
        });
      }
    }

    wordloader.prototype.getwords = function() {
      return this.texts;
    };

    return wordloader;

  })(events.EventEmitter);

  exports.wordloader = wordloader;

}).call(this);
